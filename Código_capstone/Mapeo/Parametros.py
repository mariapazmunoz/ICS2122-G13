import numpy
import json
with open('tiempo_s1_small.json', 'r') as file:
    tiempo_data = json.load(file)
with open('distancia_s1_small.json', 'r') as file:
    dist_data = json.load(file)

lunes = martes = miercoles = jueves = viernes = sabado = domingo = False

domingo = True
dia = "domingo"
#caso = "_base"
caso = ""

if lunes:
    I_N = [8,10,11,12,13,14,15,16,17,18,23,24,44,45,46,47,48,49,50,51,52,53,54,55,56,57,72,73,74,75,76,77,78,79,81,82,83,84,85,86,87,88]
    I_M = []
    I_E = []
    I_P = []
    K_1 = [2001, 2002, 2003, 2004, 2005]
    K_2 = [2006, 2007, 2008, 2009, 2010]
    K_E = [2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023]
elif martes:
    I_N = [4,5,6,7,10,11,12,13,16,18,20,21,22,37,38,39,53,54,55,56,57,68,69,71,73,74,76,79,82,83,92,98]
    I_M = [9,31,32,34,35,36,40,60,64,67,70,80,90,94]
    I_E = [94,100]
    I_P = []
    K_1 = [2001, 2002, 2003, 2004, 2005]
    K_2 = [2006, 2007, 2008, 2009, 2010]
    K_E = [2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021]
elif miercoles:
    I_N = [4,5,6,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,39,51,52,53,54,55,68,69,91,92]
    I_M = [94, 97]
    I_E = [1, 2, 3, 26, 27, 28, 29, 30, 58, 59, 61, 62, 65, 66, 94, 100]
    I_P = [42, 63]
    K_1 = [2001, 2002, 2003, 2004, 2005]
    K_2 = [2006, 2007, 2008, 2009, 2010, 2011]
    K_E = [2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023, 2024]
elif jueves:
    I_N = [4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 48, 50, 52, 53, 55, 69, 71, 72, 73, 81, 83, 84, 85, 86, 87, 88, 91, 92]
    I_M = [90, 94, 97]
    I_E = [1, 2, 3, 26, 27, 28, 29, 94, 100]
    I_P = [93, 95, 99]
    K_1 = [2001, 2002, 2003, 2004]
    K_2 = [2005, 2006, 2007, 2008]
    K_E = [2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021]
elif viernes:
    I_N = [4, 5, 8, 11, 13, 15, 19, 21, 23, 25, 39, 41, 44, 47, 50, 53, 55, 68,69, 71, 73, 75, 76, 77, 81, 82, 84, 85, 86, 87, 88, 92, 98]
    I_M = [9, 31, 32, 33, 34, 35, 36, 40, 64, 67, 70, 80, 89, 90, 97]
    I_E = [2, 3, 26, 27, 30, 33, 58, 62, 65, 66]
    I_P = [89, 95]
    K_1 = [2001, 2002, 2003, 2004, 2005]
    K_2 = [2006, 2007, 2008, 2009]
    K_E = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]
elif sabado:
    I_N = [4, 5, 8, 11, 13, 15, 19, 21, 23, 25, 39, 41, 44, 47, 50, 53, 55, 68, 69, 71, 73, 75, 76, 77, 81, 82, 84, 85, 86, 87, 88, 92, 98]
    I_M = [9, 31, 32, 33, 34, 35, 36, 40, 64, 67, 70, 80, 89, 90, 97]
    I_E = [2, 3, 26, 27, 30, 33, 58, 62, 65, 66]
    I_P = [89, 95]
    K_1 = [2001, 2002, 2003, 2004, 2005]
    K_2 = [2006, 2007, 2008, 2009]
    K_E = [2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022]
elif domingo:
    I_N = [4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 37, 38, 39, 41, 51, 52, 53, 54, 55, 56, 57, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82,83]
    I_M = []
    I_E = []
    I_P = []
    K_1 = [2001, 2002]
    K_2 = [2003, 2004]
    K_E = [2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017]

I = list(set(I_N + I_M + I_E + I_P))
K = K_1 + K_2 + K_E

#Unidades de Medicamentos#
if len(I_M) > 0:
    M = [3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036]

else:
    M = []

#Unidades de Examenes#
if len(I_E + I_P) > 0:
    E = [3001,3002,3003,3004,3005,3006,3007,3008,3009,3010,3011,3012,3013,3014,3015,3016,3017,3018,3019,3020,3021,3022,3023,3024] 
else:
    E = []

#Hospital#
H = [4000]
H_ = [4001] #Copia de H#

################
###PARAMETROS###
################
x = {1: -33.407984475555196, 2: -33.40673304855977, 3: -33.53481983349353, 4: -33.44325655353938, 5: -33.41223812690537, 6: -33.44511898910953, 7: -33.447775612589865, 8: -33.447775612589865, 9: -33.4531730200788, 10: -33.4531730200788, 11: -33.483115402883364, 12: -33.483115402883364, 13: -33.49620807657587, 14: -33.49620807657587, 15: -33.394300068032706, 16: -33.394300068032706, 17: -33.48195645531728, 18: -33.436435203470865, 19: -33.60458459526215, 20: -33.60458459526215, 21: -33.511973250931554, 22: -33.44153028226575, 23: -33.44153028226575, 24: -33.3821278928166, 25: -33.5696559327555, 26: -33.4625677461991, 27: -33.37549, 28: -33.4526411806261, 29: -33.4008982983805, 30: -33.34608, 31: -33.473306208925, 32: -33.5640945615383, 33: -33.486634475459, 34: -33.4423020602651, 35: -33.5534159394386, 36: -33.4120491430552, 37: -33.37508, 38: -33.4046917571287, 39: -33.4102219667567, 40: -33.440529140838, 41: -33.5777500915022, 42: -33.4777051224586, 43: -33.386134272813, 44: -33.302349564892, 45: -33.4949533229542, 46: -33.31145, 47: -33.5404577088956, 48: -33.3827486717346, 49: -33.3530357276488, 50: -33.5696449540966, 51: -33.4839917327844, 52: -33.3974090997367, 53: -33.4177056176121, 54: -33.5203135882598, 55: -33.5689690012118, 56: -33.3662680122145, 57: -33.4400275104423, 58: -33.4254986073546, 59: -33.4798074875306, 60: -33.4081283513259, 61: -33.524676592647, 62: -33.3869180002066, 63: -33.4717086295103, 64: -33.4289453229234, 65: -33.4428739993358, 66: -33.4826421074569, 67: -33.4332738844538, 68: -33.5308126141896, 69: -33.3351185227765, 70: -33.36502, 71: -33.438519920020546, 72: -33.438519920020546, 73: -33.45741585914982, 74: -33.40061803594601, 75: -33.38639152328872, 76: -33.61382999012055, 77: -33.61382999012055, 78: -33.61382999012055, 79: -33.45794557819373, 80: -33.45794557819373, 81: -33.45410273738206, 82: -33.34639493983022, 83: -33.374774658057156, 84: -33.42677728000534, 85: -33.418883966474375, 86: -33.42768979761553, 87: -33.33264493559275, 88: -33.374873031136694, 89: -33.605338880168595, 90: -33.46776, 91: -33.66046, 92: -33.36997799608739, 93: -33.44650291011494, 94: -33.554051894541594, 95: -33.300100825075816, 96: -33.67113, 97: -33.55126, 98: -33.45893, 99: -33.45575531575613, 100: -33.54038803640342,  3001: -33.4405283, 3002: -33.41470095, 3003: -33.3897496, 3004: -33.4803992, 3005: -33.4306957, 3006: -33.371569673684206, 3007: -33.40541279166666, 3008: -33.4002902, 3009: -33.4885844, 3010: -33.4178357, 3011: -33.4152747, 3012: -33.4187124, 3013: -33.4234748, 3014: -33.4548253, 3015: -33.3519673, 3016: -33.42817355, 3017: -33.2943348, 3018: -33.4439799, 3019: -33.38668851484425, 3020: -33.409395351398345, 3021: -33.488368, 3022: -33.41516365, 3023: -33.3655276, 3024: -33.517556400000004, 3025: -33.537164101574305, 3026: -33.4644533, 3027: -33.27770427410908, 3028: -33.45528444911936, 3029: -33.4248806, 3030: -33.5838786, 3031: -33.4693945, 3032: -33.442129300000005, 3033: -33.437694199999996, 3034: -33.3985095, 3035: -33.44716231404493, 3036: -33.39008644194295, 4000: -33.4425163850868, 4001: -33.4425163850868}
y = {1: -70.57434246230358, 2: -70.65932146158067, 3: -70.57330348394986, 4: -70.64482923346527, 5: -70.5871952875033, 6: -70.64292632983052, 7: -70.65416899076102, 8: -70.65416899076102, 9: -70.66017441894982, 10: -70.66017441894982, 11: -70.53443733167958, 12: -70.53443733167958, 13: -70.70776859260033, 14: -70.70776859260033, 15: -70.56243257401137, 16: -70.56243257401137, 17: -70.59818301633645, 18: -70.57916673346568, 19: -70.58904099200976, 20: -70.58904099200976, 21: -70.77576474790239, 22: -70.76232160428461, 23: -70.76232160428461, 24: -70.6614690786627, 25: -70.6795189000254, 26: -70.6565115658969, 27: -70.71254, 28: -70.5675457326452, 29: -70.6442061281843, 30: -70.50829, 31: -70.5924267262778, 32: -70.5933568715257, 33: -70.6603166892859, 34: -70.572957170301, 35: -70.6974982461194, 36: -70.5232821147317, 37: -70.53119, 38: -70.6965726571711, 39: -70.5084039290268, 40: -70.6792113462901, 41: -70.597424574022, 42: -70.6122919915549, 43: -70.7233214804612, 44: -70.7244901443027, 45: -70.5497152003549, 46: -70.68297, 47: -70.6219988341502, 48: -70.5051957485692, 49: -70.6623805606902, 50: -70.6902988643872, 51: -70.6539529892211, 52: -70.5871208438074, 53: -70.6410583027603, 54: -70.5846176763017, 55: -70.7058163019141, 56: -70.6354624533165, 57: -70.7027328547946, 58: -70.5780036746944, 59: -70.6221016382778, 60: -70.6306478106422, 61: -70.6397769412168, 62: -70.6604097036223, 63: -70.5876816428792, 64: -70.5762195747409, 65: -70.621054243533, 66: -70.6097505158174, 67: -70.6130907790371, 68: -70.5584683259499, 69: -70.5473421915623, 70: -70.65928, 71: -70.66849686230181, 72: -70.66849686230181, 73: -70.6047169046282, 74: -70.56294344881287, 75: -70.5231352046323, 76: -70.57685494807897, 77: -70.57685494807897, 78: -70.57685494807897, 79: -70.5992563753932, 80: -70.5992563753932, 81: -70.58502280306114, 82: -70.72756733977535, 83: -70.50373443077794, 84: -70.55561174850084, 85: -70.6015351709255, 86: -70.69073746619807, 87: -70.775740799832, 88: -70.54315535879964, 89: -70.57846736027994, 90: -70.52338, 91: -70.76009,  92: -70.67610552907774, 93: -70.74649262204818, 94: -70.68446059529926, 95: -70.74269206769381, 96: -70.66849,  97: -70.54968, 98: -70.52285, 99: -70.53003143993831, 100: -70.77964572837381, 3001: -70.6487302, 3002: -70.58869113705722, 3003: -70.5456739, 3004: -70.7522176, 3005: -70.5786693, 3006: -70.51844700789474, 3007: -70.5727939875, 3008: -70.5109862, 3009: -70.5499158, 3010: -70.6061914, 3011: -70.5837405, 3012: -70.6022063, 3013: -70.6105842, 3014: -70.5788863, 3015: -70.5204896, 3016: -70.54100968874681, 3017: -70.868697, 3018: -70.6410871, 3019: -70.56662854858988, 3020: -70.54453503311075, 3021: -70.75146, 3022: -70.54065024203916, 3023: -70.6784741, 3024: -70.59837282521127, 3025: -70.77110628780088, 3026: -70.5501778, 3027: -70.62778789031832, 3028: -70.59520098205475, 3029: -70.6099349, 3030: -70.7141612, 3031: -70.6255138, 3032: -70.64187572309942, 3033: -70.63767477520867, 3034: -70.5861442, 3035: -70.74138458626325, 3036: -70.67594775009864, 4000: -70.64005814623555, 4001: -70.64005814623555}

t = {}
for llave, tiempo in tiempo_data.items():
    # Convertir la llave del string en una tupla usando eval
    tupla = eval(llave)
    # Asignar la nueva llave (como tupla) y el valor original al nuevo diccionario
    t[tupla] = tiempo

d = {}
for llave, dist in dist_data.items():
    # Convertir la llave del string en una tupla usando eval
    tupla = eval(llave)
    # Asignar la nueva llave (como tupla) y el valor original al nuevo diccionario
    d[tupla] = dist

if lunes or martes or miercoles or jueves or viernes:
    r = {1: 12500, 2: 12500, 3: 12500, 4: 12500, 5: 12500, 6: 12500, 7: 12500, 8: 12500, 9: 12500, 10: 12500, 11: 12500, 12: 12500, 13: 12500, 14: 12500, 15: 12500, 16: 12500, 17: 12500, 18: 12500, 19: 12500, 20: 12500, 21: 12500, 22: 12500, 23: 12500, 24: 12500, 25: 12500, 26: 12500, 27: 12500, 28: 12500, 29: 12500, 30: 12500, 31: 15000, 32: 15000, 33: 15000, 34: 15000, 35: 15000, 36: 15000, 37: 15000, 38: 15000, 39: 15000, 40: 15000, 41: 15000, 42: 15000, 43: 15000, 44: 15000, 45: 15000, 46: 15000, 47: 15000, 48: 15000, 49: 15000, 50: 15000, 51: 20000, 52: 20000, 53: 20000, 54: 20000, 55: 20000, 56: 20000, 57: 20000, 58: 20000, 59: 20000, 60: 20000, 61: 20000, 62: 20000, 63: 20000, 64: 20000, 65: 20000, 66: 20000, 67: 20000, 68: 20000, 69: 20000, 70: 20000, 71: 7500, 72: 7500, 73: 7500, 74: 7500, 75: 7500, 76: 7500, 77: 7500, 78: 7500, 79: 7500, 80: 7500, 81: 10000, 82: 10000, 83: 12500, 84: 12500, 85: 12500, 86: 12500, 87: 12500, 88: 12500, 89: 12500, 90: 12500, 91: 20000, 92: 10000, 93: 12500, 94: 7500, 95: 12500, 96: 15000, 97: 10000, 98: 7500, 99: 20000, 100: 12500}
elif sabado or domingo:
    r = {1: 15000, 2: 15000, 3: 15000, 4: 15000, 5: 15000, 6: 15000, 7: 15000, 8: 15000, 9: 15000, 10: 15000, 11: 15000, 12: 15000, 13: 15000, 14: 15000, 15: 15000, 16: 15000, 17: 15000, 18: 15000, 19: 15000, 20: 15000, 21: 15000, 22: 15000, 23: 15000, 24: 15000, 25: 15000, 26: 15000, 27: 15000, 28: 15000, 29: 15000, 30: 15000, 31: 20000, 32: 20000, 33: 20000, 34: 20000, 35: 20000, 36: 20000, 37: 20000, 38: 20000, 39: 20000, 40: 20000, 41: 20000, 42: 20000, 43: 20000, 44: 20000, 45: 20000, 46: 20000, 47: 20000, 48: 20000, 49: 20000, 50: 20000, 51: 25000, 52: 25000, 53: 25000, 54: 25000, 55: 25000, 56: 25000, 57: 25000, 58: 25000, 59: 25000, 60: 25000, 61: 25000, 62: 25000, 63: 25000, 64: 25000, 65: 25000, 66: 25000, 67: 25000, 68: 25000, 69: 25000, 70: 25000, 71: 10000, 72: 10000, 73: 10000, 74: 10000, 75: 10000, 76: 10000, 77: 10000, 78: 10000, 79: 10000, 80: 10000, 81: 12500, 82: 12500, 83: 15000, 84: 15000, 85: 15000, 86: 15000, 87: 15000, 88: 15000, 89: 15000, 90: 15000, 91: 25000, 92: 12500, 93: 15000, 94: 10000, 95: 15000, 96: 20000, 97: 12500, 98: 10000, 99: 25000, 100: 15000}

cf = 15000
l = {1: 30, 2: 30, 3: 30, 4: 30, 5: 30, 6: 30, 7: 30, 8: 30, 9: 30, 10: 30, 11: 30, 12: 30, 13: 30, 14: 30, 15: 30, 16: 30, 17: 30, 18: 30, 19: 30, 20: 30, 21: 30, 22: 30, 23: 30, 24: 30, 25: 30, 26: 30, 27: 30, 28: 30, 29: 30, 30: 30, 31: 60, 32: 60, 33: 60, 34: 60, 35: 60, 36: 60, 37: 60, 38: 60, 39: 60, 40: 60, 41: 60, 42: 60, 43: 60, 44: 60, 45: 60, 46: 60, 47: 60, 48: 60, 49: 60, 50: 60, 51: 120, 52: 120, 53: 120, 54: 120, 55: 120, 56: 120, 57: 120, 58: 120, 59: 120, 60: 120, 61: 120, 62: 120, 63: 120, 64: 120, 65: 120, 66: 120, 67: 120, 68: 120, 69: 120, 70: 120, 71: 60, 72: 60, 73: 60, 74: 60, 75: 60, 76: 60, 77: 60, 78: 60, 79: 60, 80: 60, 81: 60, 82: 60, 83: 90, 84: 90, 85: 90, 86: 90, 87: 90, 88: 90, 89: 120, 90: 90, 91: 90, 92: 60, 93: 90, 94: 150, 95: 60, 96: 150, 97: 60, 98: 60, 99: 30, 100: 30,  3001: 30, 3002: 30, 3003: 30, 3004: 30, 3005: 30, 3006: 30, 3007: 30, 3008: 30, 3009: 30, 3010: 30, 3011: 30, 3012: 30, 3013: 30, 3014: 30, 3015: 30, 3016: 30, 3017: 30, 3018: 30, 3019: 30, 3020: 30, 3021: 30, 3022: 30, 3023: 30, 3024: 30,  3025: 30, 3026: 30, 3027: 30, 3028: 30, 3029: 30, 3030: 30, 3031: 30, 3032: 30, 3033: 30, 3034: 30, 3035: 30, 3036: 30, 4000: 0, 4001: 0} #tiempo de permanencia en el nodo
b = {1: 480, 2: 480, 3: 480, 4: 480, 5: 480, 6: 480, 7: 480, 8: 1200, 9: 480, 10: 1200, 11: 480, 12: 1200, 13: 480, 14: 1200, 15: 480, 16: 1200, 17: 480, 18: 480, 19: 480, 20: 1200, 21: 480, 22: 480, 23: 1200, 24: 600, 25: 600, 26: 600, 27: 600, 28: 600, 29: 600, 30: 600, 31: 720, 32: 720, 33: 660, 34: 720, 35: 720, 36: 720, 37: 720, 38: 720, 39: 720, 40: 720, 41: 720, 42: 660, 43: 720, 44: 720, 45: 720, 46: 1140, 47: 1140, 48: 1140, 49: 1140, 50: 1140, 51: 480, 52: 480, 53: 480, 54: 480, 55: 480, 56: 480, 57: 480, 58: 480, 59: 480, 60: 480, 61: 480, 62: 480, 63: 480, 64: 480, 65: 480, 66: 480, 67: 480, 68: 480, 69: 480, 70: 480, 71: 540, 72: 1200, 73: 540, 74: 540, 75: 540, 76: 540, 77: 900, 78: 1260, 79: 540, 80: 540, 81: 540, 82: 540, 83: 540, 84: 540, 85: 1020, 86: 1020, 87: 1020, 88: 1020, 89: 510, 90: 780, 91: 990, 92: 570, 93: 510, 94: 480, 95: 570, 96: 570, 97: 540, 98: 480, 99: 480, 100: 510, 3001: 480, 3002: 480, 3003: 480, 3004: 480, 3005: 480, 3006: 480, 3007: 480, 3008: 480, 3009: 480, 3010: 480, 3011: 480, 3012: 480, 3013: 480, 3014: 480, 3015: 480, 3016: 480, 3017: 480, 3018: 480, 3019: 480, 3020: 840, 3021: 840, 3022: 840, 3023: 840, 3024: 840, 3025: 480, 3026: 480, 3027: 480, 3028: 480, 3029: 480, 3030: 480, 3031: 720, 3032: 720, 3033: 720, 3034: 1140, 3035: 1140, 3036: 1140}
f = {1: 1020, 2: 1020, 3: 1020, 4: 1020, 5: 1020, 6: 1020, 7: 600, 8: 1380, 9: 600, 10: 1380, 11: 600, 12: 1380, 13: 600, 14: 1380, 15: 600, 16: 1380, 17: 1020, 18: 1020, 19: 600, 20: 1380, 21: 1200, 22: 600, 23: 1380, 24: 720, 25: 720, 26: 720, 27: 720, 28: 720, 29: 720, 30: 900, 31: 1020, 32: 1020, 33: 1020, 34: 1020, 35: 1020, 36: 1020, 37: 1020, 38: 1020, 39: 1020, 40: 1020, 41: 1020, 42: 1020, 43: 1020, 44: 1020, 45: 1020, 46: 1320, 47: 1320, 48: 1320, 49: 1320, 50: 1320, 51: 1200, 52: 1200, 53: 1200, 54: 1200, 55: 1200, 56: 1200, 57: 1200, 58: 660, 59: 660, 60: 1200, 61: 660, 62: 660, 63: 660, 64: 1200, 65: 660, 66: 660, 67: 1200, 68: 1200, 69: 1200, 70: 1200, 71: 660, 72: 1320, 73: 660, 74: 660, 75: 660, 76: 660, 77: 1080, 78: 1380, 79: 660, 80: 660, 81: 660, 82: 660, 83: 660, 84: 660, 85: 1320, 86: 1320, 87: 1320, 88: 1320, 89: 1050, 90: 1200, 91: 1410, 92: 990, 93: 1050, 94: 1380, 95: 810, 96: 810, 97: 1320, 98: 1380, 99: 1380, 100: 1170, 3001: 840, 3002: 840, 3003: 840, 3004: 840, 3005: 840, 3006: 840, 3007: 840, 3008: 840, 3009: 840, 3010: 840, 3011: 840, 3012: 840, 3013: 840, 3014: 840, 3015: 840, 3016: 840, 3017: 840, 3018: 840, 3019: 840, 3020: 1140, 3021: 1140, 3022: 1140, 3023: 1140, 3024: 1140, 3025: 720, 3026: 720, 3027: 720, 3028: 720, 3029: 720, 3030: 720, 3031: 1140, 3032: 1140, 3033: 1140, 3034: 1320, 3035: 1320, 3036: 1320}    #hasta cuando se puede acceder al nodo en min
a = {k: 8*60 if k in K_E+K_1 else 15*60 for k in K}
s = {k: 17*60 if k in K_1 else 23*60 for k in K}
B = 1360/13

#Mayorisin#
valores_g = True #Agrega valores de G especificos al modelo#

if valores_g == False:
    G1 = 10000
    G2 = 10000
    G3 = 10000
    G4 = {(i,j,k): 10000 for i in I+M+E+H+H_ for j in I+M+E+H+H_ for k in K}
    G5 = {i: 10000 for i in M}
    G6 = {(i,j): 10000 for i in M for j in I_M}
    G7 = {i: 10000 for i in I_E+I_P}
    G8 = {(i,j): 10000 for i in I_P for j in E}

else:
    G1 = len(I)
    G2 = len(I_M)
    G3 = len(I_E+I_P)
    G4 = {(i,j,k): s[k]+l[i]+t[i,j] for i in I+M+E+H+H_ for j in I+M+E+H+H_ for k in K}
    G5 = {i: f[i] for i in M}
    G6 = {(i,j): f[j]-l[i]-60 for i in M for j in I_M}
    G7 = {i: f[i] for i in I_E+I_P}
    G8 = {(i,j): f[j]-l[i]-60 for i in I_P for j in E}