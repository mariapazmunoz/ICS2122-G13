import json
import ast

from funciones import tiempo_distancia_api, actualizar_json, eliminar_error

# ESTE ARCHIVO ES EJECUTADO CUANDO SE CAPTARON LOS ERRORES DE LA API O DE PROBLEMAS EXTERNOS, 
# ESTOS SON CAPTADOS POR ERROR.JSON

# Longitud y latitud
x = {1: -33.407984475555196, 2: -33.40673304855977, 3: -33.53481983349353, 4: -33.44325655353938, 5: -33.41223812690537, 6: -33.44511898910953, 7: -33.447775612589865, 8: -33.447775612589865, 9: -33.4531730200788, 10: -33.4531730200788, 11: -33.483115402883364, 12: -33.483115402883364, 13: -33.49620807657587, 14: -33.49620807657587, 15: -33.394300068032706, 16: -33.394300068032706, 17: -33.48195645531728, 18: -33.436435203470865, 19: -33.60458459526215, 20: -33.60458459526215, 21: -33.511973250931554, 22: -33.44153028226575, 23: -33.44153028226575, 24: -33.3821278928166, 25: -33.5696559327555, 26: -33.4625677461991, 27: -33.37549, 28: -33.4526411806261, 29: -33.4008982983805, 30: -33.34608, 31: -33.473306208925, 32: -33.5640945615383, 33: -33.486634475459, 34: -33.4423020602651, 35: -33.5534159394386, 36: -33.4120491430552, 37: -33.37508, 38: -33.4046917571287, 39: -33.4102219667567, 40: -33.440529140838, 41: -33.5777500915022, 42: -33.4777051224586, 43: -33.386134272813, 44: -33.302349564892, 45: -33.4949533229542, 46: -33.31145, 47: -33.5404577088956, 48: -33.3827486717346, 49: -33.3530357276488, 50: -33.5696449540966, 51: -33.4839917327844, 52: -33.3974090997367, 53: -33.4177056176121, 54: -33.5203135882598, 55: -33.5689690012118, 56: -33.3662680122145, 57: -33.4400275104423, 58: -33.4254986073546, 59: -33.4798074875306, 60: -33.4081283513259, 61: -33.524676592647, 62: -33.3869180002066, 63: -33.4717086295103, 64: -33.4289453229234, 65: -33.4428739993358, 66: -33.4826421074569, 67: -33.4332738844538, 68: -33.5308126141896, 69: -33.3351185227765, 70: -33.36502, 71: -33.438519920020546, 72: -33.438519920020546, 73: -33.45741585914982, 74: -33.40061803594601, 75: -33.38639152328872, 76: -33.61382999012055, 77: -33.61382999012055, 78: -33.61382999012055, 79: -33.45794557819373, 80: -33.45794557819373, 81: -33.45410273738206, 82: -33.34639493983022, 83: -33.374774658057156, 84: -33.42677728000534, 85: -33.418883966474375, 86: -33.42768979761553, 87: -33.33264493559275, 88: -33.374873031136694, 89: -33.605338880168595, 90: -33.46776, 91: -33.66046, 92: -33.36997799608739, 93: -33.44650291011494, 94: -33.554051894541594, 95: -33.300100825075816, 96: -33.67113, 97: -33.55126, 98: -33.45893, 99: -33.45575531575613, 100: -33.54038803640342,  3001: -33.4405283, 3002: -33.41470095, 3003: -33.3897496, 3004: -33.4803992, 3005: -33.4306957, 3006: -33.371569673684206, 3007: -33.40541279166666, 3008: -33.4002902, 3009: -33.4885844, 3010: -33.4178357, 3011: -33.4152747, 3012: -33.4187124, 3013: -33.4234748, 3014: -33.4548253, 3015: -33.3519673, 3016: -33.42817355, 3017: -33.2943348, 3018: -33.4439799, 3019: -33.38668851484425, 3020: -33.409395351398345, 3021: -33.488368, 3022: -33.41516365, 3023: -33.3655276, 3024: -33.517556400000004, 3025: -33.537164101574305, 3026: -33.4644533, 3027: -33.27770427410908, 3028: -33.45528444911936, 3029: -33.4248806, 3030: -33.5838786, 3031: -33.4693945, 3032: -33.442129300000005, 3033: -33.437694199999996, 3034: -33.3985095, 3035: -33.44716231404493, 3036: -33.39008644194295, 4000: -33.4425163850868, 4001: -33.4425163850868}
y = {1: -70.57434246230358, 2: -70.65932146158067, 3: -70.57330348394986, 4: -70.64482923346527, 5: -70.5871952875033, 6: -70.64292632983052, 7: -70.65416899076102, 8: -70.65416899076102, 9: -70.66017441894982, 10: -70.66017441894982, 11: -70.53443733167958, 12: -70.53443733167958, 13: -70.70776859260033, 14: -70.70776859260033, 15: -70.56243257401137, 16: -70.56243257401137, 17: -70.59818301633645, 18: -70.57916673346568, 19: -70.58904099200976, 20: -70.58904099200976, 21: -70.77576474790239, 22: -70.76232160428461, 23: -70.76232160428461, 24: -70.6614690786627, 25: -70.6795189000254, 26: -70.6565115658969, 27: -70.71254, 28: -70.5675457326452, 29: -70.6442061281843, 30: -70.50829, 31: -70.5924267262778, 32: -70.5933568715257, 33: -70.6603166892859, 34: -70.572957170301, 35: -70.6974982461194, 36: -70.5232821147317, 37: -70.53119, 38: -70.6965726571711, 39: -70.5084039290268, 40: -70.6792113462901, 41: -70.597424574022, 42: -70.6122919915549, 43: -70.7233214804612, 44: -70.7244901443027, 45: -70.5497152003549, 46: -70.68297, 47: -70.6219988341502, 48: -70.5051957485692, 49: -70.6623805606902, 50: -70.6902988643872, 51: -70.6539529892211, 52: -70.5871208438074, 53: -70.6410583027603, 54: -70.5846176763017, 55: -70.7058163019141, 56: -70.6354624533165, 57: -70.7027328547946, 58: -70.5780036746944, 59: -70.6221016382778, 60: -70.6306478106422, 61: -70.6397769412168, 62: -70.6604097036223, 63: -70.5876816428792, 64: -70.5762195747409, 65: -70.621054243533, 66: -70.6097505158174, 67: -70.6130907790371, 68: -70.5584683259499, 69: -70.5473421915623, 70: -70.65928, 71: -70.66849686230181, 72: -70.66849686230181, 73: -70.6047169046282, 74: -70.56294344881287, 75: -70.5231352046323, 76: -70.57685494807897, 77: -70.57685494807897, 78: -70.57685494807897, 79: -70.5992563753932, 80: -70.5992563753932, 81: -70.58502280306114, 82: -70.72756733977535, 83: -70.50373443077794, 84: -70.55561174850084, 85: -70.6015351709255, 86: -70.69073746619807, 87: -70.775740799832, 88: -70.54315535879964, 89: -70.57846736027994, 90: -70.52338, 91: -70.76009,  92: -70.67610552907774, 93: -70.74649262204818, 94: -70.68446059529926, 95: -70.74269206769381, 96: -70.66849,  97: -70.54968, 98: -70.52285, 99: -70.53003143993831, 100: -70.77964572837381, 3001: -70.6487302, 3002: -70.58869113705722, 3003: -70.5456739, 3004: -70.7522176, 3005: -70.5786693, 3006: -70.51844700789474, 3007: -70.5727939875, 3008: -70.5109862, 3009: -70.5499158, 3010: -70.6061914, 3011: -70.5837405, 3012: -70.6022063, 3013: -70.6105842, 3014: -70.5788863, 3015: -70.5204896, 3016: -70.54100968874681, 3017: -70.868697, 3018: -70.6410871, 3019: -70.56662854858988, 3020: -70.54453503311075, 3021: -70.75146, 3022: -70.54065024203916, 3023: -70.6784741, 3024: -70.59837282521127, 3025: -70.77110628780088, 3026: -70.5501778, 3027: -70.62778789031832, 3028: -70.59520098205475, 3029: -70.6099349, 3030: -70.7141612, 3031: -70.6255138, 3032: -70.64187572309942, 3033: -70.63767477520867, 3034: -70.5861442, 3035: -70.74138458626325, 3036: -70.67594775009864, 4000: -70.64005814623555, 4001: -70.64005814623555}

# Conjuntos de unidad de examenes y m√©dicas
ue = tuple(range(3001,3025))
um = tuple(range(3025,3037))

# Datos iniciales
tiempo_dic = {}
distancia_dic = {}
error = []
distancia_bool = False
tiempo_bool = False

# Lee el archivo actual de json existente
with open("error.json", 'r') as archivo:
    diccionario = json.load(archivo)

# Convierte las claves de string a tuplas
nuevo_diccionario = {ast.literal_eval(k): v for k, v in diccionario.items()}
# Guarda el diccionario en "dic"
dic = nuevo_diccionario

for cord in list(nuevo_diccionario):
    coordenada1 = (y[cord[0]], x[cord[0]])
    coordenada2 = (y[cord[1]], x[cord[1]])
    # En caso de ser la misma coordenada directamente es igual a 0
    if cord[0] == cord[1]:
        tiempo = 0.0
        distancia = 0.0
    # Sino en caso de pertenecer al mismo conjunto (ue/um) se asigna un valor fijo
    elif cord[0] in ue and cord[1] in ue:
        tiempo = 1440.0
        distancia = 400.0
    elif cord[0] in um and cord[1] in um:
        tiempo = 1440.0
        distancia = 400.0
    # Sino se calcula con la api
    else:
        api = tiempo_distancia_api(coordenada1, coordenada2, cord[0], cord[1])
        if isinstance(api, list):
            tiempo = api[0]
            distancia = api[1]
            if isinstance(tiempo, (int, float)):
                actualizar_json("distancia.json", {str((cord[0], cord[1])): distancia})
                eliminar_error(dic, cord, "error.json")
